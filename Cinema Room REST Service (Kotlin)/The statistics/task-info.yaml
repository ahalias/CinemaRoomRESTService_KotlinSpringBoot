type: edu
files:
- name: src/cinema/Application.kt
  visible: true
  text: |-
    package cinema

    import org.springframework.boot.autoconfigure.SpringBootApplication
    import org.springframework.boot.runApplication
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.RestController
    import com.fasterxml.jackson.annotation.*
    import org.springframework.web.bind.annotation.*

    @SpringBootApplication
    open class Application

    fun main(args: Array<String>) {
        runApplication<Application>(*args)
    }

    @RestController
    class SeatInfo {
        private val rows = 9
        private val columns = 9
        private var availableSeats = mutableListOf<Map<String, Int>>()

        init {
            for (row in 1..rows) {
                for (column in 1..columns) {
                    availableSeats.add(mapOf("row" to row, "column" to column))
                }
            }
        }

        @GetMapping("/seats")
        fun seatList(): Map<String, Any> {
            return mapOf(
                "total_rows" to rows,
            "total_columns" to columns,
                "available_seats" to availableSeats
            )
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    buildscript {
        ext {
            kotlinVersion = "1.6.10"
            springBootVersion = "2.6.2"
            springDependencyManagementVersion = "1.0.11.RELEASE"
        }
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$springDependencyManagementVersion"
        }
    }

    plugins {
        id 'org.springframework.boot' version '2.6.2'
        id 'io.spring.dependency-management' version '1.0.11.RELEASE'
        id 'org.jetbrains.kotlin.jvm'
    }

    repositories {
        mavenCentral()
    }

    sourceSets {
        main {
            resources {
                srcDirs("src/main/resources")
            }
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.ApplicationKt;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(ApplicationKt.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/RoomApi.kt
  visible: true
  text: |-
    package cinema

    import org.springframework.http.HttpStatus
    import org.springframework.http.ResponseEntity
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.PostMapping
    import org.springframework.web.bind.annotation.RequestBody
    import org.springframework.web.bind.annotation.RequestParam
    import org.springframework.web.bind.annotation.RestController
    import java.util.*
    import javax.validation.Valid


    @RestController
    class RoomApi(private val seatInfo: SeatInfo, private val roomInfo: RoomInfo) {

        @GetMapping("/seats")
        fun seatList(): RoomInfo {
            seatInfo.roomInfo.available_seats.filter {it.status == "free"}
            return seatInfo.roomInfo
        }

        @PostMapping("/purchase")
        fun purchaseTicket(@RequestBody @Valid purchase: PurchaseTicket): ResponseEntity<Map<String, Any?>> {
            val seat = seatInfo.roomInfo.available_seats
                .filter { it.row == purchase.row && it.column == purchase.column }
            if (purchase.row !in 1..roomInfo.total_rows || purchase.column !in 1..roomInfo.total_columns) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(mapOf("error" to "The number of a row or a column is out of bounds!"))
            }  else if (seat[0].status == "free") {
                seat[0].status = "purchased"
                seat[0].token = UUID.randomUUID()
                return ResponseEntity.status(HttpStatus.OK).body(mapOf("token" to seat[0].token, "ticket" to seat[0]))
            } else {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(mapOf("error" to "The ticket has been already purchased!"))
            }
        }

        @PostMapping("/return")
        fun returnTicket(@RequestBody token: Map<String, String>): ResponseEntity<Map<String, Any>> {
            val ticketToReturn = seatInfo.roomInfo.available_seats
                .filter { it.token == UUID.fromString(token["token"]) }
            if (ticketToReturn.isEmpty()) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(mapOf("error" to "Wrong token!"))
            } else {
                ticketToReturn[0].token = null
                ticketToReturn[0].status = "free"
                return ResponseEntity.status(HttpStatus.OK).body(mapOf("returned_ticket" to ticketToReturn[0]))
            }
        }

        @PostMapping("/stats")
        fun showStats(@RequestParam password: String): ResponseEntity<Map<String, Any>> {
            if (password == "super_secret") {
                val currentIncome = seatInfo.roomInfo.available_seats
                    .filter {it.status == "purchased"}
                    .sumOf {it.price}
                val availableSeats = seatInfo.roomInfo.available_seats
                    .filter {it.status == "free"}
                    .count()
                val purchasedSeats = seatInfo.roomInfo.available_seats
                    .filter {it.status == "purchased"}
                    .count()
                return ResponseEntity.status(HttpStatus.OK).body(mapOf(
                    "current_income" to currentIncome,
                    "number_of_available_seats" to availableSeats,
                    "number_of_purchased_tickets" to purchasedSeats
                ))
            } else {
                return ResponseEntity.status(HttpStatus.OK).body(mapOf("error" to "The password is wrong!"))
            }
        }


    }
  learner_created: true
- name: src/cinema/RoomData.kt
  visible: true
  text: |+
    package cinema

    import com.fasterxml.jackson.annotation.JsonIgnore
    import org.springframework.stereotype.Service
    import java.util.*
    import javax.validation.constraints.Size


    @Service
    data class RoomInfo(
        val total_rows: Int = 9,
        val total_columns: Int = 9,
        val available_seats: MutableList<Seat> = mutableListOf()
    )

    data class Seat(
        @JsonIgnore
        var token: UUID? = null,
        val row: Int,
        val column: Int,
        @JsonIgnore
        var status: String,
        var price: Int)

    data class PurchaseTicket(
        @Size(min=1, max=9)
        val row: Int,
        @Size(min=1, max=9)
        val column: Int
    )


  learner_created: true
- name: src/cinema/RoomConstructor.kt
  visible: true
  text: |-
    package cinema

    import org.springframework.stereotype.Service


    @Service
    class SeatInfo(val roomInfo: RoomInfo) {
        init {
            for (row in 1..roomInfo.total_rows) {
                for (column in 1..roomInfo.total_columns) {
                    val price = if (row <= 4) 10 else 8
                    roomInfo.available_seats.add(Seat(null, row, column, "free", price))
                }
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/263/stages/1334/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Sun, 16 Apr 2023 09:21:57 UTC"
record: -1
