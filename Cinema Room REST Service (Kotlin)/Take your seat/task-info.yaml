type: edu
files:
- name: src/cinema/Application.kt
  visible: true
  text: |-
    package cinema

    import org.springframework.boot.autoconfigure.SpringBootApplication
    import org.springframework.boot.runApplication
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.RestController
    import com.fasterxml.jackson.annotation.*
    import org.springframework.web.bind.annotation.*

    @SpringBootApplication
    open class Application

    fun main(args: Array<String>) {
        runApplication<Application>(*args)
    }

    @RestController
    class SeatInfo {
        private val rows = 9
        private val columns = 9
        private var availableSeats = mutableListOf<Map<String, Int>>()

        init {
            for (row in 1..rows) {
                for (column in 1..columns) {
                    availableSeats.add(mapOf("row" to row, "column" to column))
                }
            }
        }

        @GetMapping("/seats")
        fun seatList(): Map<String, Any> {
            return mapOf(
                "total_rows" to rows,
            "total_columns" to columns,
                "available_seats" to availableSeats
            )
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28853
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    buildscript {
        ext {
            kotlinVersion = "1.6.10"
            springBootVersion = "2.6.2"
            springDependencyManagementVersion = "1.0.11.RELEASE"
        }
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$springDependencyManagementVersion"
        }
    }

    plugins {
        id 'org.springframework.boot' version '2.6.2'
        id 'io.spring.dependency-management' version '1.0.11.RELEASE'
        id 'org.jetbrains.kotlin.jvm'
    }

    repositories {
        mavenCentral()
    }

    sourceSets {
        main {
            resources {
                srcDirs("src/main/resources")
            }
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.ApplicationKt;
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(ApplicationKt.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("row", 1)
                        .value("column", 1)
                        .value("price", 10)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds
        };
    }
  learner_created: false
- name: src/cinema/RoomApi.kt
  visible: true
  text: |-
    package cinema

    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.RestController


    @RestController
    class RoomApi(private val seatInfo: SeatInfo) {

        @GetMapping("/seats")
        fun seatList(): Map<String, Any> {
            return mapOf(
                "total_rows" to seatInfo.rows,
                "total_columns" to seatInfo.columns,
                "available_seats" to seatInfo.availableSeats,
            )
        }
    }
  learner_created: true
- name: src/cinema/RoomConstructor.kt
  visible: true
  text: |-
    package cinema

    import org.springframework.boot.autoconfigure.SpringBootApplication
    import org.springframework.boot.runApplication
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.RestController
    import com.fasterxml.jackson.annotation.*
    import org.springframework.stereotype.Service
    import org.springframework.web.bind.annotation.*



    @Service
    class SeatInfo {
        val rows = 9
        val columns = 9
        var availableSeats = mutableListOf<Map<String, Any>>()

        init {
            for (row in 1..rows) {
                for (column in 1..columns) {
                    val price = if (row <= 4) 10 else 8
                    availableSeats.add(mapOf(
                        "row" to row,
                        "column" to column,
                        "status" to "free",
                        "price" to price))
                }
            }
        }
    }
  learner_created: true
- name: src/cinema/RoomData.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/263/stages/1332/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 16 Apr 2023 08:23:04 UTC"
record: 1
